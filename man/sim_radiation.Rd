% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main_niche_fill_sim.R
\name{sim_radiation}
\alias{sim_radiation}
\title{Main Niche Filling Simulation Function}
\usage{
sim_radiation(parms)
}
\arguments{
\item{parms}{A named list containing three named list elements:
\itemize{
\item{"K_parms"}{: Named list of parameters relating to the carrying capacity landscape function}
\item{"a_parms"}{: Named list of parameters relating to the competition function}
\item{"macro_parms"}{: Named list of parameters relating to the macroevolutionary simulation}
}

See Parameter List section for details on what parameters are in which lists.}
}
\value{
A niche_fill_sim object containing the final simulation object,
a set of intermediate phylogenies, and the parameters used to run the simulation
}
\description{
Function to setup and run the niche filling simulation
}
\section{Parameter List}{

There are three named lists in the \code{parms} parameter, relating to the
carrying capacity, the competition, and the macroevolutionary model. The parameters found
in each one are as follows:
}

\section{\code{K_parms}}{

\itemize{
\item{\code{h0}}{: Total maximum height of the carrying capacity landscape}
\item{\code{hz}}{: Maximum height of each of u peaks in the landscape; vector of length u}
\item{\code{biz}}{: Centre of each of u peaks in the landscape for each of d dimensions; 
matrix of dimension d by u}
\item{\code{sigiz}}{: Width of each of u peaks for each of d dimensions; matrix of length d by u}
\item{\code{Piz}}{: Super-gaussian parameter for each of u peaks for each of d dimensions; 
matrix of dimension d by u}
\item{\code{sig0i}}{: Total width of landscape in all dimensions; determines how far from zero the carrying capacity
drops off to nearly zero; vector of length d}
\item{\code{P0i}}{: Total super-gaussian parameter; determines how quickly or gradually the carrying
capacity drops off near the landscape borders in each dimension. Higher values give more extreme drop-offs;
vector of length d}
\item{\code{a}}{: Minimum values of carrying capacity within landscape limits}
}
}

\section{\code{a_parms}}{

\itemize{
\item{\code{gamma_i}}{: Strength of competition; determines how quickly the competition
strength between two species drops off with increasing distance between their niche
trait values; vector of length d, where d is the number of niche dimensions}
\item{\code{D_i}}{: Super-gaussiain parameter for competition; this parameter controls
how the precipitously the competition strength drops off with increasing niche distance.
Higher values lead to a more cliff-like competition kernel, with strong competition
between highly similar species, then very little competition beyond some threshold}
}
}

\section{\code{macro_parms}}{

\itemize{
\item{\code{b_rate}}{: Pure birth rate for phylogeny simulation; the rate at which new species
form by splitting}
\item{\code{init_traits}}{: Initial trait values for ancestral species; vector of length 
n_traits, where n_traits is the number of traits being simulated}
\item{\code{e_var}}{: Evolutionary rates for all traits; vector of length n_traits}
\item{\code{init_Ns}}{: Starting population sizes for two initial species in simulation,
after first split with ancestral species; vector of length 2}
\item{\code{init_br}}{: Time to ancestral species for initial speciation split}
\item{\code{check_extinct}}{: Rate at which to check for species whose population size
has dropped below a threshold (currently hard-coded), which are then set as extinct}
\item{\code{tot_time}}{: The total amount of time to run the simulation in simulation time
steps}
\item{\code{V_gi}}{: Mutation rate for niche trait evolution; determines how quickly
traits can evolve in the trait evolution simulation; typically this is set very low
so that evolution proceeds much slower than population dynamics; vector of length n_trait}
#' \item{\code{mult}}{: Multiplier that determines how much traits 'jump' in trait space
after a speciation event. This is a multiple of \code{e_var}, and is the standard deviation
of a normal deviate that is added to all traits.}
\item{\code{save_tree}}{: A logical determining whether the simulation should save
intermediate states of the phylogeny during the simulation run}
\item{\code{save_tree_interval}}{: How often to save intermediate phylogenies if
\code{save_tree} = TRUE; phylogenies are saved every \code{save_tree_interval} time steps}
\item{\code{progress}}{: Print progress bar if TRUE.}
#' \item{\code{trait_hist}}{: A logical determining whether the simulation should save
all trait evolution histories. Set to FALSE if you are only interested in the end state of
the simulation in order to save memory.}
}
}

